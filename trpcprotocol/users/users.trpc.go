// Code generated by trpc-go/trpc-go-cmdline v2.3.2. DO NOT EDIT.
// source: users.proto

package users

import (
	"context"
	"errors"
	"fmt"

	_ "git.code.oa.com/trpc-go/trpc-go"
	"git.code.oa.com/trpc-go/trpc-go/client"
	"git.code.oa.com/trpc-go/trpc-go/codec"
	_ "git.code.oa.com/trpc-go/trpc-go/http"
	"git.code.oa.com/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// AccessAuthService defines service.
type AccessAuthService interface {
	// GetUsersList 获取用户信息列表
	GetUsersList(ctx context.Context, req *GetUsersListRequest) (*GetUsersListReply, error)
}

func AccessAuthService_GetUsersList_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetUsersListRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AccessAuthService).GetUsersList(ctx, reqbody.(*GetUsersListRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AccessAuthServer_ServiceDesc descriptor for server.RegisterService.
var AccessAuthServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.tprc_go_vue_blog.users.AccessAuth",
	HandlerType: ((*AccessAuthService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.tprc_go_vue_blog.users.AccessAuth/GetUsersList",
			Func: AccessAuthService_GetUsersList_Handler,
		},
	},
}

// RegisterAccessAuthService registers service.
func RegisterAccessAuthService(s server.Service, svr AccessAuthService) {
	if err := s.Register(&AccessAuthServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AccessAuth register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedAccessAuth struct{}

// GetUsersList 获取用户信息列表
func (s *UnimplementedAccessAuth) GetUsersList(ctx context.Context, req *GetUsersListRequest) (*GetUsersListReply, error) {
	return nil, errors.New("rpc GetUsersList of service AccessAuth is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// AccessAuthClientProxy defines service client proxy
type AccessAuthClientProxy interface {
	// GetUsersList 获取用户信息列表
	GetUsersList(ctx context.Context, req *GetUsersListRequest, opts ...client.Option) (rsp *GetUsersListReply, err error)
}

type AccessAuthClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAccessAuthClientProxy = func(opts ...client.Option) AccessAuthClientProxy {
	return &AccessAuthClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AccessAuthClientProxyImpl) GetUsersList(ctx context.Context, req *GetUsersListRequest, opts ...client.Option) (*GetUsersListReply, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.tprc_go_vue_blog.users.AccessAuth/GetUsersList")
	msg.WithCalleeServiceName(AccessAuthServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("tprc_go_vue_blog")
	msg.WithCalleeServer("users")
	msg.WithCalleeService("AccessAuth")
	msg.WithCalleeMethod("GetUsersList")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetUsersListReply{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
